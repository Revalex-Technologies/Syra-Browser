import styled, { css } from 'styled-components';
import { ITheme } from '~/interfaces';
import { BLUE_300 } from '~/renderer/constants';

export const StyledAddressBar = styled.div.withConfig({
  shouldForwardProp: (p) => p !== 'focus',
})<{ focus?: boolean }>`
  height: 26px;
  line-height: 25px;
  flex: 1;
  border-radius: 4px;
  margin: 0 7px;
  display: flex;
  align-items: center;
  position: relative;

  font-size: 15px;
  overflow: hidden;

  ${({ theme, focus }: { theme: ITheme; focus: boolean }) => css`
    background-color: ${theme['addressbar.backgroundColor']};
    border: 1px solid
      ${theme.isCompact
        ? theme['toolbar.lightForeground']
          ? 'rgba(255, 255, 255, 0.12)'
          : 'transparent'
        : focus
          ? `${BLUE_300} !important`
          : 'transparent'};
    color: ${theme['addressbar.textColor']};
    box-shadow: ${focus && !theme.isCompact
      ? `0 0 0 1px ${BLUE_300}`
      : `0px 0px 5px 0px rgba(0,0,0,0.1)`};

    ${!theme.isCompact &&
    css`
      &:hover, &:focus, &:focus-visible, &:focus-within {\} !important; } !important; }; };
      }
    `}
  `};

  --danger-color: #ff6b6b;
`;

export const InputContainer = styled.div`
  flex: 1;
  position: relative;
  height: 100%;
  margin-left: 2px;
  overflow: hidden;
`;

export const Text = styled.div.withConfig({
  shouldForwardProp: (p) => p !== 'visible',
})<{ visible?: boolean }>`
  pointer-events: none;
  position: absolute;
  top: 50%;
  transform: translateY(calc(-50% + 0.1px));
  flex: 1;
  color: inherit;
  margin-top: 0px;
  flex-wrap: nowrap;
  white-space: nowrap;
  overflow: hidden;
  font-size: 14px;
  ${({ visible }: { visible: boolean; theme: ITheme }) => css`
    display: ${visible ? 'flex' : 'none'};
  `};
`;

export const Input = styled.input.withConfig({
  shouldForwardProp: (p) => p !== 'visible',
})<{ visible?: boolean }>`
  outline: none;
  min-width: 0;
  width: 100%;
  height: 100%;
  line-height: 25px;
  background-color: transparent;
  border: none;
  padding: 0;
  padding-top: 0px;
  margin: 0;
  transform: translateY(0.5px);
  color: black;
  font-family: inherit;
  word-spacing: inherit;
  font-size: 14px;

  ${({ visible, theme }: { visible: boolean; theme: ITheme }) => css`
    color: ${visible ? 'inherit' : 'transparent'};

    &::placeholder {
      color: ${theme['searchBox.lightForeground']
        ? 'rgba(255, 255, 255, 0.54)'
        : 'rgba(0, 0, 0, 0.54)'};
    }

    ${theme['searchBox.lightForeground'] &&
    css`
      ::selection {
        background: rgba(145, 185, 230, 0.99);
        color: black;
        height: 100px;
      }
    `}
  `};
`;

export const SecurityButton = styled.div.withConfig({
  shouldForwardProp: (p) => !['expanded', 'danger'].includes(p as string),
})<{ expanded?: boolean; danger?: boolean }>`
  /* ensure the icon is perfectly centered within the button */
  display: inline-grid;
  place-items: center;
  /* keep content from shifting on hover/expand */
  box-sizing: border-box;
  box-sizing: border-box;
  -webkit-app-region: no-drag;
  pointer-events: auto;
  height: 26px;
  min-width: 34px;
  padding: 0 8px;
  margin: 0 1px;
  border-radius: 2px;
  transition: background-color 0.15s ease;

  /* nudge the svg slightly left for optical centering */
  & .icon,
  & .icon svg {
    position: relative;
    left: -1px;
  }

  /* clamp any icon elements inside the security button */
  & .icon,
  & .icon img,
  & .icon svg {
    width: 16px !important;
    height: 16px !important;
    max-width: 16px;
    max-height: 16px;
    flex: 0 0 16px;
    display: inline-block;
    vertical-align: middle;
    background-repeat: no-repeat;
    background-position: center;
    background-size: 16px 16px;
  }

  &:hover { }

  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 0 8px;
  height: 26px;
  line-height: 25px;
  min-width: 34px;
  border-radius: 4px;
  margin-left: 0; /* hug the address bar edge */
  transition:
    0.2s background-color,
    max-width 180ms ease,
    padding 180ms ease;
  user-select: none;
  -webkit-app-region: no-drag;
  pointer-events: auto;
  position: relative;
  z-index: 1;
  background-clip: padding-box;
  cursor: pointer;

  ${({ theme, danger }: { theme: ITheme; danger?: boolean }) => css`
    background-color: transparent; /* transparent until hover */
    color: ${
      danger
        ? '#ff6b6b'
        : theme['toolbar.lightForeground']
          ? 'rgba(255, 255, 255, 0.86)'
          : 'rgba(0, 0, 0, 0.86)'
    };

    &:active { } !important; } !important; } !important; };
    }
  `};

  /*__SB_HOVER__*/
  ${({ theme }: { theme: ITheme }) => css`
    &:hover {
      background-color: ${theme['toolbar.lightForeground']
        ? 'rgba(255, 255, 255, 0.08)'
        : 'rgba(0, 0, 0, 0.06)'};
    }

    &:active {
      background-color: ${theme['toolbar.lightForeground']
        ? 'rgba(255, 255, 255, 0.12)'
        : 'rgba(0, 0, 0, 0.10)'};
    }
  `};

  .icon {
    width: 16px !important;
    height: 16px !important;
    max-width: 16px;
    max-height: 16px;
    flex: 0 0 16px;
    display: inline-block;
    vertical-align: middle;
    transform: translateX(-1px);
    background-repeat: no-repeat;
    background-position: center;
    background-size: 16px 16px;
    /* allow data: URLs and file:// icons to render crisply */
    image-rendering: -webkit-optimize-contrast;
  }
  .icon svg,
  .icon {
    width: 16px;
    height: 16px;
  }

  .label {
    color: inherit;
    max-width: ${'${'}(p: any) => (p.expanded ? '200px': '0') ${'}'};
    overflow: hidden;
    white-space: nowrap;
    text-overflow: clip;
    transition: max-width 180ms ease;
    font-size: 12px;
  }

  &.expanded {
    /* keep footprint stable */
  }

  &.danger {
    color: #ff6b6b;
  }
  &.danger svg {
    filter: none;
  }
  &.danger svg path {
    fill: currentColor;
  }
`;
